{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction ML Aide's purpose is making model management a joy for you! Key Benefits ML Aide is designed and developed to be Enterprise-ready: Identity, security and integrity as first class citizen Diverse: Supports every ML Library for complete freedom Transparent: Provided Open Source for maximum transparency Independent: Runs on every Cloud platform or On-Premises for complete independence Scalable: Scalable from single user to large enterprises and ready for growing demands Effective: Accelerates MLOps for more focus on what really matters: Your Business Key Features Track all relevant information of your machine learning models with ML Aide to manage your model lifecycle from training to retirement. Experiment Tracking: Track parameters, metrics and artifacts in your machine learning experiments that are organized through single runs. Artifact Management: Attach artifacts like code, configs or models to your experiment runs and reuse them in your next run. Experiment Lineage: Inspect your experiment with a visualized lineage representing the relationship between all runs and artifacts. Model Staging: Put your models under version control and stage them to obtain transparency and reproducibility in your operations. Run Evaluation: Evaluate your runs by viewing or comparing parameters and metrics to identify the best model for your machine learning product. ML Library Integration: Raising amount of integrated machine learning libraries for convenient tracking of parameters, metrics and models. Access Management: Manage access to your machine learning projects and collaborate with other members of your team. Getting Started Run ML Aide on your local environment Start Now Concepts Learn the fundamental concepts of ML Aide Learn More Tutorial Walk through the model development process with ML Aide View Tutorial API Reference Explore the Python SDK or REST API Reference Explore API Reference","title":"Introduction"},{"location":"#introduction","text":"ML Aide's purpose is making model management a joy for you!","title":"Introduction"},{"location":"#key-benefits","text":"ML Aide is designed and developed to be Enterprise-ready: Identity, security and integrity as first class citizen Diverse: Supports every ML Library for complete freedom Transparent: Provided Open Source for maximum transparency Independent: Runs on every Cloud platform or On-Premises for complete independence Scalable: Scalable from single user to large enterprises and ready for growing demands Effective: Accelerates MLOps for more focus on what really matters: Your Business","title":"Key Benefits"},{"location":"#key-features","text":"Track all relevant information of your machine learning models with ML Aide to manage your model lifecycle from training to retirement. Experiment Tracking: Track parameters, metrics and artifacts in your machine learning experiments that are organized through single runs. Artifact Management: Attach artifacts like code, configs or models to your experiment runs and reuse them in your next run. Experiment Lineage: Inspect your experiment with a visualized lineage representing the relationship between all runs and artifacts. Model Staging: Put your models under version control and stage them to obtain transparency and reproducibility in your operations. Run Evaluation: Evaluate your runs by viewing or comparing parameters and metrics to identify the best model for your machine learning product. ML Library Integration: Raising amount of integrated machine learning libraries for convenient tracking of parameters, metrics and models. Access Management: Manage access to your machine learning projects and collaborate with other members of your team.","title":"Key Features"},{"location":"#getting-started","text":"Run ML Aide on your local environment Start Now","title":"Getting Started"},{"location":"#concepts","text":"Learn the fundamental concepts of ML Aide Learn More","title":"Concepts"},{"location":"#tutorial","text":"Walk through the model development process with ML Aide View Tutorial","title":"Tutorial"},{"location":"#api-reference","text":"Explore the Python SDK or REST API Reference Explore API Reference","title":"API Reference"},{"location":"api-reference/python-sdk/","text":"Python SDK MvcClient This is the main entry point to use this library. Creates a connection to the ML Aide server and provides read and write access to all resources. __init__ ( self , project_key , options = None ) special Creates a new instance of this class. Parameters: Name Type Description Default project_key str The key of the project, that should be accessed. All operations will be made on this project. required options MvcOptions Optional options that will be used to establish a connection. None Source code in mlaide/client.py def __init__ ( self , project_key : str , options : MvcOptions = None ): \"\"\"Creates a new instance of this class. Arguments: project_key: The key of the project, that should be accessed. All operations will be made on this project. options: Optional options that will be used to establish a connection. \"\"\" if project_key is None : raise ValueError ( \"project key must be not None\" ) self . __project_key = project_key if options is None : self . __options = MvcClient . __get_default_options () else : self . __options = MvcClient . __merge_options ( MvcClient . __get_default_options (), options ) self . __api_client = AuthenticatedClient ( base_url = self . __options . mvc_server_url , api_key = self . __options . api_key ) start_new_run ( self , experiment_key = None , run_name = None , used_artifacts = None ) Creates and starts a new run, that will be assigned to the specified experiment. The run object can be used to log all necessary information. Parameters: Name Type Description Default experiment_key str The key of the experiment, that the new run should be assigned to. If None a new, random experiment will be created. None run_name str The name of the run. The name helps to identify the run for humans. If None a random name will be used. None used_artifacts List[ArtifactRef] An optional list of ArtifactRef that references artifacts, that are used as input for this run. This information will help to create and visualize the experiment lineage. None Returns: Type Description ActiveRun This object encapsulates the newly created run and provides functions to log all information that belongs to the run. Source code in mlaide/client.py def start_new_run ( self , experiment_key : str = None , run_name : str = None , used_artifacts : List [ ArtifactRef ] = None ) -> ActiveRun : \"\"\"Creates and starts a new run, that will be assigned to the specified experiment. The run object can be used to \\ log all necessary information. Arguments: experiment_key: The key of the experiment, that the new run should be assigned to. If `None` a new, random \\ experiment will be created. run_name: The name of the run. The name helps to identify the run for humans. If `None` a random name will \\ be used. used_artifacts: An optional list of `ArtifactRef` that references artifacts, that are used as input for \\ this run. This information will help to create and visualize the experiment lineage. Returns: This object encapsulates the newly created run and provides functions to log all information \\ that belongs to the run. \"\"\" return ActiveRun ( self . __api_client , self . __project_key , experiment_key , run_name , used_artifacts ) Active Run This class provides access to runs that are stored in ML Aide add_artifact_file ( self , artifact , file , filename = None ) Add a file to an existing artifact. To add multiple file, specify a directory or invoke this function multiple times. Parameters: Name Type Description Default artifact Artifact The artifact to which the file should be added. required file Union[str, _io.BytesIO] The file that should be added. This can be a io.BytesIO object or a string to a file or directory. required filename str The filename. If the file is of type BytesIO the filename must be specified. If the file is a string, the original filename will be the default. None Source code in mlaide/active_run.py def add_artifact_file ( self , artifact : Artifact , file : Union [ str , BytesIO ], filename : str = None ): \"\"\"Add a file to an existing artifact. To add multiple file, specify a directory or invoke this function multiple times. Arguments: artifact: The artifact to which the file should be added. file: The file that should be added. This can be a io.BytesIO object or a string to a file or directory. filename: The filename. If the file is of type BytesIO the filename must be specified. If the file is a string, the original filename will be the default. \"\"\" artifact_api . upload_file ( client = self . __api_client , project_key = self . __project_key , artifact_name = artifact . name , artifact_version = artifact . version , filename = filename if filename is not None else ActiveRun . __extract_filename ( file ), file = ActiveRun . __normalize_file ( file )) create_artifact ( self , name , artifact_type , metadata ) Creates a new artifact. If an artifact with the same name already exists, a new artifact with the next available version number will be registered. Parameters: Name Type Description Default name str The name of the artifact. required artifact_type str The artifact type. required metadata Optional[Dict[str, str]] Some optional metadata that will be attached to the artifact. required Source code in mlaide/active_run.py def create_artifact ( self , name : str , artifact_type : str , metadata : Optional [ Dict [ str , str ]]) -> Artifact : \"\"\"Creates a new artifact. If an artifact with the same name already exists, a new artifact with the next available version number will be registered. Arguments: name: The name of the artifact. artifact_type: The artifact type. metadata: Some optional metadata that will be attached to the artifact. \"\"\" artifact_dto = ArtifactDto ( name = name , type = artifact_type , metadata = metadata , run_key = self . __run . key ) artifact_dto = artifact_api . create_artifact ( client = self . __api_client , project_key = self . __project_key , artifact = artifact_dto ) return dto_to_artifact ( artifact_dto ) log_metric ( self , key , value ) Logs a metric Parameters: Name Type Description Default key str The key of the metric. required value The value of the metric. The value can be any type that is JSON serializable. required Source code in mlaide/active_run.py def log_metric ( self , key : str , value ) -> Run : \"\"\"Logs a metric Arguments: key: The key of the metric. value: The value of the metric. The value can be any type that is JSON serializable. \"\"\" self . __run . metrics [ key ] = value run_api . update_run_metrics ( client = self . __api_client , project_key = self . __project_key , run_key = self . __run . key , metrics = { key : value }) return self . __run log_model ( self , model , model_name , metadata = None ) Creates a new artifact with type 'model'. The artifact will be registered as model. Parameters: Name Type Description Default model The model. The model must be serializable. required model_name str The name of the model. The name will be used as artifact filename. required metadata Optional[Dict[str, str]] Some optional metadata that will be attached to the artifact. None Source code in mlaide/active_run.py def log_model ( self , model , model_name : str , metadata : Optional [ Dict [ str , str ]] = None ): \"\"\"Creates a new artifact with type 'model'. The artifact will be registered as model. Arguments: model: The model. The model must be serializable. model_name: The name of the model. The name will be used as artifact filename. metadata: Some optional metadata that will be attached to the artifact. \"\"\" serialized_model = _model_serializer . serialize ( model ) artifact = self . create_artifact ( name = model_name , artifact_type = 'model' , metadata = metadata ) self . add_artifact_file ( artifact = artifact , file = serialized_model , filename = 'model.pkl' ) artifact_api . create_model ( client = self . __api_client , project_key = self . __project_key , artifact_name = artifact . name , artifact_version = artifact . version ) log_parameter ( self , key , value ) Logs a parameter Parameters: Name Type Description Default key str The key of the parameter. required value The value of the parameter. The value must be a scalar value (e.g. string, int, float, ...). required Source code in mlaide/active_run.py def log_parameter ( self , key : str , value ) -> Run : \"\"\"Logs a parameter Arguments: key: The key of the parameter. value: The value of the parameter. The value must be a scalar value (e.g. string, int, float, ...). \"\"\" self . __run . parameters [ key ] = value run_api . update_run_parameters ( client = self . __api_client , project_key = self . __project_key , run_key = self . __run . key , parameters = { key : value }) return self . __run Active Artifact This class provides access to artifacts that are stored in ML Aide download ( self , target_directory ) Downloads all files of this artifact and stores them into the specified directory. Parameters: Name Type Description Default target_directory str The path to the directory where all files should be stored. required Source code in mlaide/active_artifact.py def download ( self , target_directory : str ): \"\"\"Downloads all files of this artifact and stores them into the specified directory. Arguments: target_directory: The path to the directory where all files should be stored. \"\"\" # download artifact_bytes = self . __download_zip () # unzip and write to disk with ZipFile ( artifact_bytes ) as z : z . extractall ( target_directory ) load ( self , filename ) Load a specific file of this artifact into memory Parameters: Name Type Description Default filename str The name of the file that should be loaded required Source code in mlaide/active_artifact.py def load ( self , filename : str ) -> BytesIO : \"\"\"Load a specific file of this artifact into memory Arguments: filename: The name of the file that should be loaded \"\"\" # TODO: Do not download whole zip; instead download just the single file zip_bytes , zip_filename = self . __download_zip () with ZipFile ( zip_bytes ) as z : zip_info = z . infolist () desired_file = next ( info for info in zip_info if info . filename == filename ) with z . open ( desired_file , 'r' ) as zip_file : return BytesIO ( zip_file . read ())","title":"Python SDK"},{"location":"api-reference/python-sdk/#python-sdk","text":"","title":"Python SDK"},{"location":"api-reference/python-sdk/#mvcclient","text":"This is the main entry point to use this library. Creates a connection to the ML Aide server and provides read and write access to all resources.","title":"MvcClient"},{"location":"api-reference/python-sdk/#mlaide.client.MvcClient.__init__","text":"Creates a new instance of this class. Parameters: Name Type Description Default project_key str The key of the project, that should be accessed. All operations will be made on this project. required options MvcOptions Optional options that will be used to establish a connection. None Source code in mlaide/client.py def __init__ ( self , project_key : str , options : MvcOptions = None ): \"\"\"Creates a new instance of this class. Arguments: project_key: The key of the project, that should be accessed. All operations will be made on this project. options: Optional options that will be used to establish a connection. \"\"\" if project_key is None : raise ValueError ( \"project key must be not None\" ) self . __project_key = project_key if options is None : self . __options = MvcClient . __get_default_options () else : self . __options = MvcClient . __merge_options ( MvcClient . __get_default_options (), options ) self . __api_client = AuthenticatedClient ( base_url = self . __options . mvc_server_url , api_key = self . __options . api_key )","title":"__init__()"},{"location":"api-reference/python-sdk/#mlaide.client.MvcClient.start_new_run","text":"Creates and starts a new run, that will be assigned to the specified experiment. The run object can be used to log all necessary information. Parameters: Name Type Description Default experiment_key str The key of the experiment, that the new run should be assigned to. If None a new, random experiment will be created. None run_name str The name of the run. The name helps to identify the run for humans. If None a random name will be used. None used_artifacts List[ArtifactRef] An optional list of ArtifactRef that references artifacts, that are used as input for this run. This information will help to create and visualize the experiment lineage. None Returns: Type Description ActiveRun This object encapsulates the newly created run and provides functions to log all information that belongs to the run. Source code in mlaide/client.py def start_new_run ( self , experiment_key : str = None , run_name : str = None , used_artifacts : List [ ArtifactRef ] = None ) -> ActiveRun : \"\"\"Creates and starts a new run, that will be assigned to the specified experiment. The run object can be used to \\ log all necessary information. Arguments: experiment_key: The key of the experiment, that the new run should be assigned to. If `None` a new, random \\ experiment will be created. run_name: The name of the run. The name helps to identify the run for humans. If `None` a random name will \\ be used. used_artifacts: An optional list of `ArtifactRef` that references artifacts, that are used as input for \\ this run. This information will help to create and visualize the experiment lineage. Returns: This object encapsulates the newly created run and provides functions to log all information \\ that belongs to the run. \"\"\" return ActiveRun ( self . __api_client , self . __project_key , experiment_key , run_name , used_artifacts )","title":"start_new_run()"},{"location":"api-reference/python-sdk/#active-run","text":"This class provides access to runs that are stored in ML Aide","title":"Active Run"},{"location":"api-reference/python-sdk/#mlaide.active_run.ActiveRun.add_artifact_file","text":"Add a file to an existing artifact. To add multiple file, specify a directory or invoke this function multiple times. Parameters: Name Type Description Default artifact Artifact The artifact to which the file should be added. required file Union[str, _io.BytesIO] The file that should be added. This can be a io.BytesIO object or a string to a file or directory. required filename str The filename. If the file is of type BytesIO the filename must be specified. If the file is a string, the original filename will be the default. None Source code in mlaide/active_run.py def add_artifact_file ( self , artifact : Artifact , file : Union [ str , BytesIO ], filename : str = None ): \"\"\"Add a file to an existing artifact. To add multiple file, specify a directory or invoke this function multiple times. Arguments: artifact: The artifact to which the file should be added. file: The file that should be added. This can be a io.BytesIO object or a string to a file or directory. filename: The filename. If the file is of type BytesIO the filename must be specified. If the file is a string, the original filename will be the default. \"\"\" artifact_api . upload_file ( client = self . __api_client , project_key = self . __project_key , artifact_name = artifact . name , artifact_version = artifact . version , filename = filename if filename is not None else ActiveRun . __extract_filename ( file ), file = ActiveRun . __normalize_file ( file ))","title":"add_artifact_file()"},{"location":"api-reference/python-sdk/#mlaide.active_run.ActiveRun.create_artifact","text":"Creates a new artifact. If an artifact with the same name already exists, a new artifact with the next available version number will be registered. Parameters: Name Type Description Default name str The name of the artifact. required artifact_type str The artifact type. required metadata Optional[Dict[str, str]] Some optional metadata that will be attached to the artifact. required Source code in mlaide/active_run.py def create_artifact ( self , name : str , artifact_type : str , metadata : Optional [ Dict [ str , str ]]) -> Artifact : \"\"\"Creates a new artifact. If an artifact with the same name already exists, a new artifact with the next available version number will be registered. Arguments: name: The name of the artifact. artifact_type: The artifact type. metadata: Some optional metadata that will be attached to the artifact. \"\"\" artifact_dto = ArtifactDto ( name = name , type = artifact_type , metadata = metadata , run_key = self . __run . key ) artifact_dto = artifact_api . create_artifact ( client = self . __api_client , project_key = self . __project_key , artifact = artifact_dto ) return dto_to_artifact ( artifact_dto )","title":"create_artifact()"},{"location":"api-reference/python-sdk/#mlaide.active_run.ActiveRun.log_metric","text":"Logs a metric Parameters: Name Type Description Default key str The key of the metric. required value The value of the metric. The value can be any type that is JSON serializable. required Source code in mlaide/active_run.py def log_metric ( self , key : str , value ) -> Run : \"\"\"Logs a metric Arguments: key: The key of the metric. value: The value of the metric. The value can be any type that is JSON serializable. \"\"\" self . __run . metrics [ key ] = value run_api . update_run_metrics ( client = self . __api_client , project_key = self . __project_key , run_key = self . __run . key , metrics = { key : value }) return self . __run","title":"log_metric()"},{"location":"api-reference/python-sdk/#mlaide.active_run.ActiveRun.log_model","text":"Creates a new artifact with type 'model'. The artifact will be registered as model. Parameters: Name Type Description Default model The model. The model must be serializable. required model_name str The name of the model. The name will be used as artifact filename. required metadata Optional[Dict[str, str]] Some optional metadata that will be attached to the artifact. None Source code in mlaide/active_run.py def log_model ( self , model , model_name : str , metadata : Optional [ Dict [ str , str ]] = None ): \"\"\"Creates a new artifact with type 'model'. The artifact will be registered as model. Arguments: model: The model. The model must be serializable. model_name: The name of the model. The name will be used as artifact filename. metadata: Some optional metadata that will be attached to the artifact. \"\"\" serialized_model = _model_serializer . serialize ( model ) artifact = self . create_artifact ( name = model_name , artifact_type = 'model' , metadata = metadata ) self . add_artifact_file ( artifact = artifact , file = serialized_model , filename = 'model.pkl' ) artifact_api . create_model ( client = self . __api_client , project_key = self . __project_key , artifact_name = artifact . name , artifact_version = artifact . version )","title":"log_model()"},{"location":"api-reference/python-sdk/#mlaide.active_run.ActiveRun.log_parameter","text":"Logs a parameter Parameters: Name Type Description Default key str The key of the parameter. required value The value of the parameter. The value must be a scalar value (e.g. string, int, float, ...). required Source code in mlaide/active_run.py def log_parameter ( self , key : str , value ) -> Run : \"\"\"Logs a parameter Arguments: key: The key of the parameter. value: The value of the parameter. The value must be a scalar value (e.g. string, int, float, ...). \"\"\" self . __run . parameters [ key ] = value run_api . update_run_parameters ( client = self . __api_client , project_key = self . __project_key , run_key = self . __run . key , parameters = { key : value }) return self . __run","title":"log_parameter()"},{"location":"api-reference/python-sdk/#active-artifact","text":"This class provides access to artifacts that are stored in ML Aide","title":"Active Artifact"},{"location":"api-reference/python-sdk/#mlaide.active_artifact.ActiveArtifact.download","text":"Downloads all files of this artifact and stores them into the specified directory. Parameters: Name Type Description Default target_directory str The path to the directory where all files should be stored. required Source code in mlaide/active_artifact.py def download ( self , target_directory : str ): \"\"\"Downloads all files of this artifact and stores them into the specified directory. Arguments: target_directory: The path to the directory where all files should be stored. \"\"\" # download artifact_bytes = self . __download_zip () # unzip and write to disk with ZipFile ( artifact_bytes ) as z : z . extractall ( target_directory )","title":"download()"},{"location":"api-reference/python-sdk/#mlaide.active_artifact.ActiveArtifact.load","text":"Load a specific file of this artifact into memory Parameters: Name Type Description Default filename str The name of the file that should be loaded required Source code in mlaide/active_artifact.py def load ( self , filename : str ) -> BytesIO : \"\"\"Load a specific file of this artifact into memory Arguments: filename: The name of the file that should be loaded \"\"\" # TODO: Do not download whole zip; instead download just the single file zip_bytes , zip_filename = self . __download_zip () with ZipFile ( zip_bytes ) as z : zip_info = z . infolist () desired_file = next ( info for info in zip_info if info . filename == filename ) with z . open ( desired_file , 'r' ) as zip_file : return BytesIO ( zip_file . read ())","title":"load()"},{"location":"api-reference/rest-api/","text":"REST API const ui = SwaggerUIBundle({ url: 'swagger.yml', dom_id: '#swagger-ui', })","title":"REST API"},{"location":"api-reference/rest-api/#rest-api","text":"const ui = SwaggerUIBundle({ url: 'swagger.yml', dom_id: '#swagger-ui', })","title":"REST API"},{"location":"architecture/","text":"Overview Work in Progress This chapter describes the architectural core concepts of ML Aide.","title":"Overview"},{"location":"architecture/#overview","text":"","title":"Overview"},{"location":"architecture/#work-in-progress","text":"This chapter describes the architectural core concepts of ML Aide.","title":"Work in Progress"},{"location":"essentials/","text":"Overview This chapter describes the essentials of divided in projects, experiments, runs and their connection with users, artifacts and models. Projects Projects are at the top hierarchy level and group several experiments that belong to it. Projects represent a business problem which shall be solved with a machine learning model that is created through the underlying experiments. Example Project: House Price Prediction Please see projects page for further details. Experiments Experiments belong to exactly one project and group several runs that belong to it. Experiments represent an attempt to solve the business problem with the underlying runs that generate several artifacts as well as models. Example Project: House Price Prediction Experiment 1: TODO Raman: Find a good example Experiment 2: TODO Raman: Find a good example Experiment 3: TODO Raman: Find a good example Please see experiments page for further details. Runs Runs belong to exactly one project and to none, one or many experiments. However, it is good practice to assign a run to at least one experiment. They may have input from previous runs and may generate outputs \u2013 named artifacts \u2013 such as models. Runs also contain parameters and metrics that are key value pairs to make them comparable. Example Project: House Price Prediction Experiment 1: TODO Raman: Find a good example Run 1: TODO Raman: Find a good example Run 2: TODO Raman: Find a good example Run 3: TODO Raman: Find a good example Experiment 2: TODO Raman: Find a good example Run 1: TODO Raman: Find a good example Run 4: TODO Raman: Find a good example Run 5: TODO Raman: Find a good example Please see runs page for further details. Artifacts Artifacts are generated by runs and may consist of one or a group of files. They have a type that can be freely assigned as well as the artifact name. Example Experiment 1: TODO Raman: Find a good example Run 1: TODO Raman: Find a good example Artifact 1: TODO Raman: Find a good example Artifact 2: TODO Raman: Find a good example Run 2: TODO Raman: Find a good example Artifact 1: TODO Raman: Find a good example Artifact 2: TODO Raman: Find a good example Please see artifacts page for further details. Models Models are a special type of artifact named model and have a special status in ML Aide, since they are the heart of the application. Example Experiment 1: TODO Raman: Find a good example Run 1: TODO Raman: Find a good example Artifact 1: TODO Raman: Find a good example Artifact 2: TODO Raman: Find a good example Run 2: TODO Raman: Find a good example Artifact 1: TODO Raman: Find a good example Artifact 2: TODO Raman: Find a good example Run 3: TODO Raman: Find a good example Model 1: TODO Raman: Find a good example Please see models page for further details. Users Users have rights for none, one or many projects and can have different roles within each project. Available roles are Owner , Contributor and Viewer . Please see users page for further details.","title":"Overview"},{"location":"essentials/#overview","text":"This chapter describes the essentials of divided in projects, experiments, runs and their connection with users, artifacts and models.","title":"Overview"},{"location":"essentials/#projects","text":"Projects are at the top hierarchy level and group several experiments that belong to it. Projects represent a business problem which shall be solved with a machine learning model that is created through the underlying experiments. Example Project: House Price Prediction Please see projects page for further details.","title":"Projects"},{"location":"essentials/#experiments","text":"Experiments belong to exactly one project and group several runs that belong to it. Experiments represent an attempt to solve the business problem with the underlying runs that generate several artifacts as well as models. Example Project: House Price Prediction Experiment 1: TODO Raman: Find a good example Experiment 2: TODO Raman: Find a good example Experiment 3: TODO Raman: Find a good example Please see experiments page for further details.","title":"Experiments"},{"location":"essentials/#runs","text":"Runs belong to exactly one project and to none, one or many experiments. However, it is good practice to assign a run to at least one experiment. They may have input from previous runs and may generate outputs \u2013 named artifacts \u2013 such as models. Runs also contain parameters and metrics that are key value pairs to make them comparable. Example Project: House Price Prediction Experiment 1: TODO Raman: Find a good example Run 1: TODO Raman: Find a good example Run 2: TODO Raman: Find a good example Run 3: TODO Raman: Find a good example Experiment 2: TODO Raman: Find a good example Run 1: TODO Raman: Find a good example Run 4: TODO Raman: Find a good example Run 5: TODO Raman: Find a good example Please see runs page for further details.","title":"Runs"},{"location":"essentials/#artifacts","text":"Artifacts are generated by runs and may consist of one or a group of files. They have a type that can be freely assigned as well as the artifact name. Example Experiment 1: TODO Raman: Find a good example Run 1: TODO Raman: Find a good example Artifact 1: TODO Raman: Find a good example Artifact 2: TODO Raman: Find a good example Run 2: TODO Raman: Find a good example Artifact 1: TODO Raman: Find a good example Artifact 2: TODO Raman: Find a good example Please see artifacts page for further details.","title":"Artifacts"},{"location":"essentials/#models","text":"Models are a special type of artifact named model and have a special status in ML Aide, since they are the heart of the application. Example Experiment 1: TODO Raman: Find a good example Run 1: TODO Raman: Find a good example Artifact 1: TODO Raman: Find a good example Artifact 2: TODO Raman: Find a good example Run 2: TODO Raman: Find a good example Artifact 1: TODO Raman: Find a good example Artifact 2: TODO Raman: Find a good example Run 3: TODO Raman: Find a good example Model 1: TODO Raman: Find a good example Please see models page for further details.","title":"Models"},{"location":"essentials/#users","text":"Users have rights for none, one or many projects and can have different roles within each project. Available roles are Owner , Contributor and Viewer . Please see users page for further details.","title":"Users"},{"location":"essentials/artifacts/","text":"Artifacts Overview Artifacts are generated by runs and may consist of one or a group of files. They have a type that can be freely assigned as well as the artifact name. Example Experiment 1: TODO Raman: Find a good example Run 1: TODO Raman: Find a good example Artifact 1: TODO Raman: Find a good example Artifact 2: TODO Raman: Find a good example Run 2: TODO Raman: Find a good example Artifact 1: TODO Raman: Find a good example Artifact 2: TODO Raman: Find a good example","title":"Artifacts"},{"location":"essentials/artifacts/#artifacts","text":"","title":"Artifacts"},{"location":"essentials/artifacts/#overview","text":"Artifacts are generated by runs and may consist of one or a group of files. They have a type that can be freely assigned as well as the artifact name. Example Experiment 1: TODO Raman: Find a good example Run 1: TODO Raman: Find a good example Artifact 1: TODO Raman: Find a good example Artifact 2: TODO Raman: Find a good example Run 2: TODO Raman: Find a good example Artifact 1: TODO Raman: Find a good example Artifact 2: TODO Raman: Find a good example","title":"Overview"},{"location":"essentials/experiments/","text":"Experiments Overview Experiments belong to exactly one project and group several runs that belong to it. Experiments represent an attempt to solve the business problem with the underlying runs that generate several artifacts as well as models. Example Project: House Price Prediction Experiment 1: TODO Raman: Find a good example Experiment 2: TODO Raman: Find a good example Experiment 3: TODO Raman: Find a good example Features Create Experiment Instructions GUI Select a project by clicking it in the home view or via the Projects dropdown in the main navigation Click the Experiments button in the side navigation Click the Add Experiment button Provide a Experiment name and a Experiment key Confirm by clicking the Ok Button Code mvc . create_experiment ( \"Experiment name\" ) Edit Experiment Instructions GUI Select a project by clicking it in the home view or via the Projects dropdown in the main navigation Click the Experiments button in the side navigation Click on the Edit Experiment button for the Provide a Experiment name and a Experiment key Confirm by clicking the Ok Button Code mvc . create_experiment ( \"Experiment name\" )","title":"Experiments"},{"location":"essentials/experiments/#experiments","text":"","title":"Experiments"},{"location":"essentials/experiments/#overview","text":"Experiments belong to exactly one project and group several runs that belong to it. Experiments represent an attempt to solve the business problem with the underlying runs that generate several artifacts as well as models. Example Project: House Price Prediction Experiment 1: TODO Raman: Find a good example Experiment 2: TODO Raman: Find a good example Experiment 3: TODO Raman: Find a good example","title":"Overview"},{"location":"essentials/experiments/#features","text":"","title":"Features"},{"location":"essentials/experiments/#create-experiment","text":"Instructions GUI Select a project by clicking it in the home view or via the Projects dropdown in the main navigation Click the Experiments button in the side navigation Click the Add Experiment button Provide a Experiment name and a Experiment key Confirm by clicking the Ok Button Code mvc . create_experiment ( \"Experiment name\" )","title":"Create Experiment"},{"location":"essentials/experiments/#edit-experiment","text":"Instructions GUI Select a project by clicking it in the home view or via the Projects dropdown in the main navigation Click the Experiments button in the side navigation Click on the Edit Experiment button for the Provide a Experiment name and a Experiment key Confirm by clicking the Ok Button Code mvc . create_experiment ( \"Experiment name\" )","title":"Edit Experiment"},{"location":"essentials/models/","text":"Models Overview Models are a special type of artifact named model and have a special status in ML Aide, since they are the heart of the application. Example Experiment 1: TODO Raman: Find a good example Run 1: TODO Raman: Find a good example Artifact 1: TODO Raman: Find a good example Artifact 2: TODO Raman: Find a good example Run 2: TODO Raman: Find a good example Artifact 1: TODO Raman: Find a good example Artifact 2: TODO Raman: Find a good example Run 3: TODO Raman: Find a good example Model 1: TODO Raman: Find a good example","title":"Models"},{"location":"essentials/models/#models","text":"","title":"Models"},{"location":"essentials/models/#overview","text":"Models are a special type of artifact named model and have a special status in ML Aide, since they are the heart of the application. Example Experiment 1: TODO Raman: Find a good example Run 1: TODO Raman: Find a good example Artifact 1: TODO Raman: Find a good example Artifact 2: TODO Raman: Find a good example Run 2: TODO Raman: Find a good example Artifact 1: TODO Raman: Find a good example Artifact 2: TODO Raman: Find a good example Run 3: TODO Raman: Find a good example Model 1: TODO Raman: Find a good example","title":"Overview"},{"location":"essentials/projects/","text":"Projects Overview Projects are at the top hierarchy level and group several experiments that belong to it. Projects represent a business problem which shall be solved with a machine learning model that is created through the underlying experiments. Example Project: House Price Prediction Features Create Project Instructions GUI Click the ML Aide button in the upper left corner Click the Add Project button Provide a Project name and a Project key Confirm by clicking the Ok button","title":"Projects"},{"location":"essentials/projects/#projects","text":"","title":"Projects"},{"location":"essentials/projects/#overview","text":"Projects are at the top hierarchy level and group several experiments that belong to it. Projects represent a business problem which shall be solved with a machine learning model that is created through the underlying experiments. Example Project: House Price Prediction","title":"Overview"},{"location":"essentials/projects/#features","text":"","title":"Features"},{"location":"essentials/projects/#create-project","text":"Instructions GUI Click the ML Aide button in the upper left corner Click the Add Project button Provide a Project name and a Project key Confirm by clicking the Ok button","title":"Create Project"},{"location":"essentials/runs/","text":"Runs Overview Runs belong to exactly one project and to none, one or many experiments. However, it is good practice to assign a run to at least one experiment. They may have input from previous runs and may generate outputs \u2013 named artifacts \u2013 such as models. Runs also contain parameters and metrics that are key value pairs to make them comparable. Example Project: House Price Prediction Experiment 1: TODO Raman: Find a good example Run 1: TODO Raman: Find a good example Run 2: TODO Raman: Find a good example Run 3: TODO Raman: Find a good example Experiment 2: TODO Raman: Find a good example Run 1: TODO Raman: Find a good example Run 4: TODO Raman: Find a good example Run 5: TODO Raman: Find a good example","title":"Runs"},{"location":"essentials/runs/#runs","text":"","title":"Runs"},{"location":"essentials/runs/#overview","text":"Runs belong to exactly one project and to none, one or many experiments. However, it is good practice to assign a run to at least one experiment. They may have input from previous runs and may generate outputs \u2013 named artifacts \u2013 such as models. Runs also contain parameters and metrics that are key value pairs to make them comparable. Example Project: House Price Prediction Experiment 1: TODO Raman: Find a good example Run 1: TODO Raman: Find a good example Run 2: TODO Raman: Find a good example Run 3: TODO Raman: Find a good example Experiment 2: TODO Raman: Find a good example Run 1: TODO Raman: Find a good example Run 4: TODO Raman: Find a good example Run 5: TODO Raman: Find a good example","title":"Overview"},{"location":"essentials/users/","text":"Users Overview Users have rights for none, one or many projects and can have different roles within each project. Available roles are Owner , Contributor and Viewer .","title":"Users"},{"location":"essentials/users/#users","text":"","title":"Users"},{"location":"essentials/users/#overview","text":"Users have rights for none, one or many projects and can have different roles within each project. Available roles are Owner , Contributor and Viewer .","title":"Overview"},{"location":"start/environment-setup/","text":"Environment Setup Work in Progress","title":"Environment Setup"},{"location":"start/environment-setup/#environment-setup","text":"","title":"Environment Setup"},{"location":"start/environment-setup/#work-in-progress","text":"","title":"Work in Progress"},{"location":"start/quickstart/","text":"Quickstart Work in Progress","title":"Quickstart"},{"location":"start/quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"start/quickstart/#work-in-progress","text":"","title":"Work in Progress"},{"location":"tutorial/create-project/","text":"Create Project Work in Progress","title":"Create Project"},{"location":"tutorial/create-project/#create-project","text":"","title":"Create Project"},{"location":"tutorial/create-project/#work-in-progress","text":"","title":"Work in Progress"},{"location":"tutorial/data-preparation/","text":"Data Preparation Work in Progress","title":"Data Preparation"},{"location":"tutorial/data-preparation/#data-preparation","text":"","title":"Data Preparation"},{"location":"tutorial/data-preparation/#work-in-progress","text":"","title":"Work in Progress"},{"location":"tutorial/introduction/","text":"Introduction Work in Progress","title":"Introduction"},{"location":"tutorial/introduction/#introduction","text":"","title":"Introduction"},{"location":"tutorial/introduction/#work-in-progress","text":"","title":"Work in Progress"},{"location":"tutorial/model-evaluation/","text":"Model Evaluation Work in Progress","title":"Model Evaluation"},{"location":"tutorial/model-evaluation/#model-evaluation","text":"","title":"Model Evaluation"},{"location":"tutorial/model-evaluation/#work-in-progress","text":"","title":"Work in Progress"},{"location":"tutorial/model-training/","text":"Model Training Work in Progress","title":"Model Training"},{"location":"tutorial/model-training/#model-training","text":"","title":"Model Training"},{"location":"tutorial/model-training/#work-in-progress","text":"","title":"Work in Progress"},{"location":"tutorial/productionize-model/","text":"Productionize Model Work in Progress","title":"Productionize Model"},{"location":"tutorial/productionize-model/#productionize-model","text":"","title":"Productionize Model"},{"location":"tutorial/productionize-model/#work-in-progress","text":"","title":"Work in Progress"}]}